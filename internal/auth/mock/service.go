// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "go-backend-template/internal/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, dto
func (_m *AuthService) Login(ctx context.Context, dto auth.LoginUserDto) (auth.LoggedUserDto, error) {
	ret := _m.Called(ctx, dto)

	var r0 auth.LoggedUserDto
	if rf, ok := ret.Get(0).(func(context.Context, auth.LoginUserDto) auth.LoggedUserDto); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(auth.LoggedUserDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, auth.LoginUserDto) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//  - ctx context.Context
//  - dto auth.LoginUserDto
func (_e *AuthService_Expecter) Login(ctx interface{}, dto interface{}) *AuthService_Login_Call {
	return &AuthService_Login_Call{Call: _e.mock.On("Login", ctx, dto)}
}

func (_c *AuthService_Login_Call) Run(run func(ctx context.Context, dto auth.LoginUserDto)) *AuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth.LoginUserDto))
	})
	return _c
}

func (_c *AuthService_Login_Call) Return(_a0 auth.LoggedUserDto, _a1 error) *AuthService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ParseAccessToken provides a mock function with given fields: accessToken
func (_m *AuthService) ParseAccessToken(accessToken string) (int64, error) {
	ret := _m.Called(accessToken)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_ParseAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseAccessToken'
type AuthService_ParseAccessToken_Call struct {
	*mock.Call
}

// ParseAccessToken is a helper method to define mock.On call
//  - accessToken string
func (_e *AuthService_Expecter) ParseAccessToken(accessToken interface{}) *AuthService_ParseAccessToken_Call {
	return &AuthService_ParseAccessToken_Call{Call: _e.mock.On("ParseAccessToken", accessToken)}
}

func (_c *AuthService_ParseAccessToken_Call) Run(run func(accessToken string)) *AuthService_ParseAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthService_ParseAccessToken_Call) Return(_a0 int64, _a1 error) *AuthService_ParseAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// VerifyAccessToken provides a mock function with given fields: accessToken
func (_m *AuthService) VerifyAccessToken(accessToken string) (int64, error) {
	ret := _m.Called(accessToken)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_VerifyAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAccessToken'
type AuthService_VerifyAccessToken_Call struct {
	*mock.Call
}

// VerifyAccessToken is a helper method to define mock.On call
//  - accessToken string
func (_e *AuthService_Expecter) VerifyAccessToken(accessToken interface{}) *AuthService_VerifyAccessToken_Call {
	return &AuthService_VerifyAccessToken_Call{Call: _e.mock.On("VerifyAccessToken", accessToken)}
}

func (_c *AuthService_VerifyAccessToken_Call) Run(run func(accessToken string)) *AuthService_VerifyAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthService_VerifyAccessToken_Call) Return(_a0 int64, _a1 error) *AuthService_VerifyAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
