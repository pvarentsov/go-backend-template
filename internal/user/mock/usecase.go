// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"
	user "go-backend-template/internal/user"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecases is an autogenerated mock type for the UserUsecases type
type UserUsecases struct {
	mock.Mock
}

type UserUsecases_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUsecases) EXPECT() *UserUsecases_Expecter {
	return &UserUsecases_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, dto
func (_m *UserUsecases) Add(ctx context.Context, dto user.AddUserDto) (int64, error) {
	ret := _m.Called(ctx, dto)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, user.AddUserDto) int64); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, user.AddUserDto) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUsecases_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type UserUsecases_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - ctx context.Context
//  - dto user.AddUserDto
func (_e *UserUsecases_Expecter) Add(ctx interface{}, dto interface{}) *UserUsecases_Add_Call {
	return &UserUsecases_Add_Call{Call: _e.mock.On("Add", ctx, dto)}
}

func (_c *UserUsecases_Add_Call) Run(run func(ctx context.Context, dto user.AddUserDto)) *UserUsecases_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.AddUserDto))
	})
	return _c
}

func (_c *UserUsecases_Add_Call) Return(_a0 int64, _a1 error) *UserUsecases_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ChangePassword provides a mock function with given fields: ctx, dto
func (_m *UserUsecases) ChangePassword(ctx context.Context, dto user.ChangeUserPasswordDto) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.ChangeUserPasswordDto) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUsecases_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type UserUsecases_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//  - ctx context.Context
//  - dto user.ChangeUserPasswordDto
func (_e *UserUsecases_Expecter) ChangePassword(ctx interface{}, dto interface{}) *UserUsecases_ChangePassword_Call {
	return &UserUsecases_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, dto)}
}

func (_c *UserUsecases_ChangePassword_Call) Run(run func(ctx context.Context, dto user.ChangeUserPasswordDto)) *UserUsecases_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.ChangeUserPasswordDto))
	})
	return _c
}

func (_c *UserUsecases_ChangePassword_Call) Return(_a0 error) *UserUsecases_ChangePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetById provides a mock function with given fields: ctx, userId
func (_m *UserUsecases) GetById(ctx context.Context, userId int64) (user.UserDto, error) {
	ret := _m.Called(ctx, userId)

	var r0 user.UserDto
	if rf, ok := ret.Get(0).(func(context.Context, int64) user.UserDto); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(user.UserDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUsecases_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type UserUsecases_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//  - ctx context.Context
//  - userId int64
func (_e *UserUsecases_Expecter) GetById(ctx interface{}, userId interface{}) *UserUsecases_GetById_Call {
	return &UserUsecases_GetById_Call{Call: _e.mock.On("GetById", ctx, userId)}
}

func (_c *UserUsecases_GetById_Call) Run(run func(ctx context.Context, userId int64)) *UserUsecases_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserUsecases_GetById_Call) Return(_a0 user.UserDto, _a1 error) *UserUsecases_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, dto
func (_m *UserUsecases) Update(ctx context.Context, dto user.UpdateUserDto) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UpdateUserDto) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUsecases_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserUsecases_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - dto user.UpdateUserDto
func (_e *UserUsecases_Expecter) Update(ctx interface{}, dto interface{}) *UserUsecases_Update_Call {
	return &UserUsecases_Update_Call{Call: _e.mock.On("Update", ctx, dto)}
}

func (_c *UserUsecases_Update_Call) Run(run func(ctx context.Context, dto user.UpdateUserDto)) *UserUsecases_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.UpdateUserDto))
	})
	return _c
}

func (_c *UserUsecases_Update_Call) Return(_a0 error) *UserUsecases_Update_Call {
	_c.Call.Return(_a0)
	return _c
}
