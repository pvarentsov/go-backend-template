// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Crypto is an autogenerated mock type for the Crypto type
type Crypto struct {
	mock.Mock
}

type Crypto_Expecter struct {
	mock *mock.Mock
}

func (_m *Crypto) EXPECT() *Crypto_Expecter {
	return &Crypto_Expecter{mock: &_m.Mock}
}

// CompareHashAndPassword provides a mock function with given fields: hash, password
func (_m *Crypto) CompareHashAndPassword(hash string, password string) bool {
	ret := _m.Called(hash, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hash, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Crypto_CompareHashAndPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareHashAndPassword'
type Crypto_CompareHashAndPassword_Call struct {
	*mock.Call
}

// CompareHashAndPassword is a helper method to define mock.On call
//  - hash string
//  - password string
func (_e *Crypto_Expecter) CompareHashAndPassword(hash interface{}, password interface{}) *Crypto_CompareHashAndPassword_Call {
	return &Crypto_CompareHashAndPassword_Call{Call: _e.mock.On("CompareHashAndPassword", hash, password)}
}

func (_c *Crypto_CompareHashAndPassword_Call) Run(run func(hash string, password string)) *Crypto_CompareHashAndPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Crypto_CompareHashAndPassword_Call) Return(_a0 bool) *Crypto_CompareHashAndPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

// GenerateJWT provides a mock function with given fields: payload, secret, exp
func (_m *Crypto) GenerateJWT(payload map[string]interface{}, secret string, exp time.Time) (string, error) {
	ret := _m.Called(payload, secret, exp)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, time.Time) string); ok {
		r0 = rf(payload, secret, exp)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}, string, time.Time) error); ok {
		r1 = rf(payload, secret, exp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypto_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
type Crypto_GenerateJWT_Call struct {
	*mock.Call
}

// GenerateJWT is a helper method to define mock.On call
//  - payload map[string]interface{}
//  - secret string
//  - exp time.Time
func (_e *Crypto_Expecter) GenerateJWT(payload interface{}, secret interface{}, exp interface{}) *Crypto_GenerateJWT_Call {
	return &Crypto_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", payload, secret, exp)}
}

func (_c *Crypto_GenerateJWT_Call) Run(run func(payload map[string]interface{}, secret string, exp time.Time)) *Crypto_GenerateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *Crypto_GenerateJWT_Call) Return(_a0 string, _a1 error) *Crypto_GenerateJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GenerateUUID provides a mock function with given fields:
func (_m *Crypto) GenerateUUID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypto_GenerateUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateUUID'
type Crypto_GenerateUUID_Call struct {
	*mock.Call
}

// GenerateUUID is a helper method to define mock.On call
func (_e *Crypto_Expecter) GenerateUUID() *Crypto_GenerateUUID_Call {
	return &Crypto_GenerateUUID_Call{Call: _e.mock.On("GenerateUUID")}
}

func (_c *Crypto_GenerateUUID_Call) Run(run func()) *Crypto_GenerateUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Crypto_GenerateUUID_Call) Return(_a0 string, _a1 error) *Crypto_GenerateUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// HashPassword provides a mock function with given fields: password
func (_m *Crypto) HashPassword(password string) (string, error) {
	ret := _m.Called(password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypto_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type Crypto_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//  - password string
func (_e *Crypto_Expecter) HashPassword(password interface{}) *Crypto_HashPassword_Call {
	return &Crypto_HashPassword_Call{Call: _e.mock.On("HashPassword", password)}
}

func (_c *Crypto_HashPassword_Call) Run(run func(password string)) *Crypto_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Crypto_HashPassword_Call) Return(_a0 string, _a1 error) *Crypto_HashPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ParseAndValidateJWT provides a mock function with given fields: token, secret
func (_m *Crypto) ParseAndValidateJWT(token string, secret string) (map[string]interface{}, error) {
	ret := _m.Called(token, secret)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(token, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypto_ParseAndValidateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseAndValidateJWT'
type Crypto_ParseAndValidateJWT_Call struct {
	*mock.Call
}

// ParseAndValidateJWT is a helper method to define mock.On call
//  - token string
//  - secret string
func (_e *Crypto_Expecter) ParseAndValidateJWT(token interface{}, secret interface{}) *Crypto_ParseAndValidateJWT_Call {
	return &Crypto_ParseAndValidateJWT_Call{Call: _e.mock.On("ParseAndValidateJWT", token, secret)}
}

func (_c *Crypto_ParseAndValidateJWT_Call) Run(run func(token string, secret string)) *Crypto_ParseAndValidateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Crypto_ParseAndValidateJWT_Call) Return(_a0 map[string]interface{}, _a1 error) *Crypto_ParseAndValidateJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ParseJWT provides a mock function with given fields: token, secret
func (_m *Crypto) ParseJWT(token string, secret string) (map[string]interface{}, error) {
	ret := _m.Called(token, secret)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(token, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypto_ParseJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseJWT'
type Crypto_ParseJWT_Call struct {
	*mock.Call
}

// ParseJWT is a helper method to define mock.On call
//  - token string
//  - secret string
func (_e *Crypto_Expecter) ParseJWT(token interface{}, secret interface{}) *Crypto_ParseJWT_Call {
	return &Crypto_ParseJWT_Call{Call: _e.mock.On("ParseJWT", token, secret)}
}

func (_c *Crypto_ParseJWT_Call) Run(run func(token string, secret string)) *Crypto_ParseJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Crypto_ParseJWT_Call) Return(_a0 map[string]interface{}, _a1 error) *Crypto_ParseJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
